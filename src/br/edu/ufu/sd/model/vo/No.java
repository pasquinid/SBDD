package br.edu.ufu.sd.model.vo;

/**
 * Autogenerated by Thrift Compiler (0.9.1)

 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class No implements org.apache.thrift.TBase<No, No._Fields>, java.io.Serializable, Cloneable, Comparable<No> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("No");

  private static final org.apache.thrift.protocol.TField IDENTIFICADOR_FIELD_DESC = new org.apache.thrift.protocol.TField("identificador", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ENDERECO_FIELD_DESC = new org.apache.thrift.protocol.TField("endereco", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PORTA_FIELD_DESC = new org.apache.thrift.protocol.TField("porta", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new NoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new NoTupleSchemeFactory());
  }

  public int identificador; // required
  public String endereco; // required
  public int porta; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IDENTIFICADOR((short)1, "identificador"),
    ENDERECO((short)2, "endereco"),
    PORTA((short)3, "porta");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IDENTIFICADOR
          return IDENTIFICADOR;
        case 2: // ENDERECO
          return ENDERECO;
        case 3: // PORTA
          return PORTA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IDENTIFICADOR_ISSET_ID = 0;
  private static final int __PORTA_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IDENTIFICADOR, new org.apache.thrift.meta_data.FieldMetaData("identificador", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ENDERECO, new org.apache.thrift.meta_data.FieldMetaData("endereco", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PORTA, new org.apache.thrift.meta_data.FieldMetaData("porta", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(No.class, metaDataMap);
  }

  public No() {
  }

  public No(
    int identificador,
    String endereco,
    int porta)
  {
    this();
    this.identificador = identificador;
    setIdentificadorIsSet(true);
    this.endereco = endereco;
    this.porta = porta;
    setPortaIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public No(No other) {
    __isset_bitfield = other.__isset_bitfield;
    this.identificador = other.identificador;
    if (other.isSetEndereco()) {
      this.endereco = other.endereco;
    }
    this.porta = other.porta;
  }

  public No deepCopy() {
    return new No(this);
  }

  @Override
  public void clear() {
    setIdentificadorIsSet(false);
    this.identificador = 0;
    this.endereco = null;
    setPortaIsSet(false);
    this.porta = 0;
  }

  public int getIdentificador() {
    return this.identificador;
  }

  public No setIdentificador(int identificador) {
    this.identificador = identificador;
    setIdentificadorIsSet(true);
    return this;
  }

  public void unsetIdentificador() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IDENTIFICADOR_ISSET_ID);
  }

  /** Returns true if field identificador is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentificador() {
    return EncodingUtils.testBit(__isset_bitfield, __IDENTIFICADOR_ISSET_ID);
  }

  public void setIdentificadorIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IDENTIFICADOR_ISSET_ID, value);
  }

  public String getEndereco() {
    return this.endereco;
  }

  public No setEndereco(String endereco) {
    this.endereco = endereco;
    return this;
  }

  public void unsetEndereco() {
    this.endereco = null;
  }

  /** Returns true if field endereco is set (has been assigned a value) and false otherwise */
  public boolean isSetEndereco() {
    return this.endereco != null;
  }

  public void setEnderecoIsSet(boolean value) {
    if (!value) {
      this.endereco = null;
    }
  }

  public int getPorta() {
    return this.porta;
  }

  public No setPorta(int porta) {
    this.porta = porta;
    setPortaIsSet(true);
    return this;
  }

  public void unsetPorta() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PORTA_ISSET_ID);
  }

  /** Returns true if field porta is set (has been assigned a value) and false otherwise */
  public boolean isSetPorta() {
    return EncodingUtils.testBit(__isset_bitfield, __PORTA_ISSET_ID);
  }

  public void setPortaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PORTA_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case IDENTIFICADOR:
      if (value == null) {
        unsetIdentificador();
      } else {
        setIdentificador((Integer)value);
      }
      break;

    case ENDERECO:
      if (value == null) {
        unsetEndereco();
      } else {
        setEndereco((String)value);
      }
      break;

    case PORTA:
      if (value == null) {
        unsetPorta();
      } else {
        setPorta((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case IDENTIFICADOR:
      return Integer.valueOf(getIdentificador());

    case ENDERECO:
      return getEndereco();

    case PORTA:
      return Integer.valueOf(getPorta());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case IDENTIFICADOR:
      return isSetIdentificador();
    case ENDERECO:
      return isSetEndereco();
    case PORTA:
      return isSetPorta();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof No)
      return this.equals((No)that);
    return false;
  }

  public boolean equals(No that) {
    if (that == null)
      return false;

    boolean this_present_identificador = true;
    boolean that_present_identificador = true;
    if (this_present_identificador || that_present_identificador) {
      if (!(this_present_identificador && that_present_identificador))
        return false;
      if (this.identificador != that.identificador)
        return false;
    }

    boolean this_present_endereco = true && this.isSetEndereco();
    boolean that_present_endereco = true && that.isSetEndereco();
    if (this_present_endereco || that_present_endereco) {
      if (!(this_present_endereco && that_present_endereco))
        return false;
      if (!this.endereco.equals(that.endereco))
        return false;
    }

    boolean this_present_porta = true;
    boolean that_present_porta = true;
    if (this_present_porta || that_present_porta) {
      if (!(this_present_porta && that_present_porta))
        return false;
      if (this.porta != that.porta)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(No other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetIdentificador()).compareTo(other.isSetIdentificador());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentificador()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identificador, other.identificador);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndereco()).compareTo(other.isSetEndereco());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndereco()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endereco, other.endereco);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPorta()).compareTo(other.isSetPorta());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPorta()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.porta, other.porta);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("No(");
    boolean first = true;

    sb.append("identificador:");
    sb.append(this.identificador);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endereco:");
    if (this.endereco == null) {
      sb.append("null");
    } else {
      sb.append(this.endereco);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("porta:");
    sb.append(this.porta);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NoStandardSchemeFactory implements SchemeFactory {
    public NoStandardScheme getScheme() {
      return new NoStandardScheme();
    }
  }

  private static class NoStandardScheme extends StandardScheme<No> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, No struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IDENTIFICADOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.identificador = iprot.readI32();
              struct.setIdentificadorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ENDERECO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endereco = iprot.readString();
              struct.setEnderecoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PORTA
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.porta = iprot.readI32();
              struct.setPortaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, No struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(IDENTIFICADOR_FIELD_DESC);
      oprot.writeI32(struct.identificador);
      oprot.writeFieldEnd();
      if (struct.endereco != null) {
        oprot.writeFieldBegin(ENDERECO_FIELD_DESC);
        oprot.writeString(struct.endereco);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PORTA_FIELD_DESC);
      oprot.writeI32(struct.porta);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NoTupleSchemeFactory implements SchemeFactory {
    public NoTupleScheme getScheme() {
      return new NoTupleScheme();
    }
  }

  private static class NoTupleScheme extends TupleScheme<No> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, No struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetIdentificador()) {
        optionals.set(0);
      }
      if (struct.isSetEndereco()) {
        optionals.set(1);
      }
      if (struct.isSetPorta()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetIdentificador()) {
        oprot.writeI32(struct.identificador);
      }
      if (struct.isSetEndereco()) {
        oprot.writeString(struct.endereco);
      }
      if (struct.isSetPorta()) {
        oprot.writeI32(struct.porta);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, No struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.identificador = iprot.readI32();
        struct.setIdentificadorIsSet(true);
      }
      if (incoming.get(1)) {
        struct.endereco = iprot.readString();
        struct.setEnderecoIsSet(true);
      }
      if (incoming.get(2)) {
        struct.porta = iprot.readI32();
        struct.setPortaIsSet(true);
      }
    }
  }

}

